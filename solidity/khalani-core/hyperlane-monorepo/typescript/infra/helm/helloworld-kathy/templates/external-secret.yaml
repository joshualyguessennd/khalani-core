apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "abacus.fullname" . }}-external-secret
  labels:
    {{- include "abacus.labels" . | nindent 4 }}
spec:
  secretStoreRef:
    name: {{ include "abacus.cluster-secret-store.name" . }}
    kind: ClusterSecretStore
  refreshInterval: "1h"
  # The secret that will be created
  target:
    name: {{ include "abacus.fullname" . }}-secret
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "abacus.labels" . | nindent 10 }}
        annotations:
          update-on-redeploy: "{{ now }}"
      data:
        GCP_SECRET_OVERRIDES_ENABLED: "true"
        GCP_SECRET_OVERRIDE_ABACUS_{{ .Values.abacus.runEnv | upper }}_KEY_DEPLOYER: {{ print "'{{ .deployer_key | toString }}'" }}
{{/*
   * For each network, create an environment variable with the RPC endpoint.
   * The templating of external-secrets will use the data section below to know how
   * to replace the correct value in the created secret.
   */}}
        {{- range .Values.abacus.chains }}
        {{- if eq $.Values.abacus.connectionType "httpQuorum" }}
        GCP_SECRET_OVERRIDE_{{ $.Values.abacus.runEnv | upper }}_RPC_ENDPOINTS_{{ . | upper }}: {{ printf "'{{ .%s_rpcs | toString }}'" . }}
        {{- else }}
        GCP_SECRET_OVERRIDE_{{ $.Values.abacus.runEnv | upper }}_RPC_ENDPOINT_{{ . | upper }}: {{ printf "'{{ .%s_rpc | toString }}'" . }}
        {{- end }}
        {{- end }}
        {{- if .Values.abacus.aws }}
        AWS_ACCESS_KEY_ID: {{ print "'{{ .aws_access_key_id | toString }}'" }}
        AWS_SECRET_ACCESS_KEY: {{ print "'{{ .aws_secret_access_key | toString }}'" }}
        {{- else }}
        GCP_SECRET_OVERRIDE_{{ .Values.abacus.context | upper }}_{{ .Values.abacus.runEnv | upper }}_KEY_KATHY: {{ print "'{{ .gcp_private_key | toString }}'" }}
        {{- end }}
  data:
  - secretKey: deployer_key
    remoteRef:
      key: {{ printf "abacus-%s-key-deployer" .Values.abacus.runEnv }}
{{/*
   * For each network, load the secret in GCP secret manager with the form: environment-rpc-endpoint-network,
   * and associate it with the secret key networkname_rpc.
   */}}
  {{- range .Values.abacus.chains }}
  {{- if eq $.Values.abacus.connectionType "httpQuorum" }}
  - secretKey: {{ printf "%s_rpcs" . }}
    remoteRef:
      key: {{ printf "%s-rpc-endpoints-%s" $.Values.abacus.runEnv . }}
  {{- else }}
  - secretKey: {{ printf "%s_rpc" . }}
    remoteRef:
      key: {{ printf "%s-rpc-endpoint-%s" $.Values.abacus.runEnv . }}
  {{- end }}
  {{- end }}
  {{- if .Values.abacus.aws }}
  - secretKey: aws_access_key_id
    remoteRef:
      key: {{ printf "%s-%s-kathy-aws-access-key-id" .Values.abacus.context .Values.abacus.runEnv }}
  - secretKey: aws_secret_access_key
    remoteRef:
      key: {{ printf "%s-%s-kathy-aws-secret-access-key" .Values.abacus.context .Values.abacus.runEnv }}
  {{- else }}
  - secretKey: gcp_private_key
    remoteRef:
      key: {{ printf "%s-%s-key-kathy" $.Values.abacus.context $.Values.abacus.runEnv }}
      property: privateKey
  {{- end }}

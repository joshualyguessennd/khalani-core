//! SeaORM Entity. Generated by sea-orm-codegen 0.10.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "checkpoint"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i64,
    pub time_created: TimeDateTime,
    pub timestamp: TimeDateTime,
    pub signature: Vec<u8>,
    pub validator: String,
    pub root: String,
    pub index: i32,
    pub origin_domain: i32,
    pub outbox_address: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TimeCreated,
    Timestamp,
    Signature,
    Validator,
    Root,
    Index,
    OriginDomain,
    OutboxAddress,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Domain,
    CheckpointUpdate,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::TimeCreated => ColumnType::DateTime.def(),
            Self::Timestamp => ColumnType::DateTime.def(),
            Self::Signature => ColumnType::Binary.def(),
            Self::Validator => ColumnType::String(Some(64u32)).def(),
            Self::Root => ColumnType::String(Some(64u32)).def(),
            Self::Index => ColumnType::Integer.def(),
            Self::OriginDomain => ColumnType::Integer.def(),
            Self::OutboxAddress => ColumnType::String(Some(64u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Domain => Entity::belongs_to(super::domain::Entity)
                .from(Column::OriginDomain)
                .to(super::domain::Column::Id)
                .into(),
            Self::CheckpointUpdate => Entity::has_many(super::checkpoint_update::Entity).into(),
        }
    }
}

impl Related<super::domain::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Domain.def()
    }
}

impl Related<super::checkpoint_update::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CheckpointUpdate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
